#!/usr/bin/env Rscript

args = commandArgs(TRUE)
if (length(args) == 0L || any(c('-h', '--help') %in% args)) {
    message('usage: genecovr [-h] [-v] [-p number]
                             [-d OUTPUT_DIRECTORY] [--height HEIGHT]
                             [--width WIDTH]
                             csvfile

positional arguments:
  csvfile               csv-delimited file with columns
                            1. data label
                            2. mapping file (supported formats: psl)
                            3. assembly file (fasta or fasta index)
                            4. transcript file (fasta or fasta index)

optional arguments:
  -h, --help            show this help message and exit
  -v, --verbose         print extra output
  -p number, --cpus number
                        number of cpus [default 1]
  -d OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY
                        output directory
  --height HEIGHT       figure height in inches [default 6.0]
  --width WIDTH         figure width in inches [default 6.0]
')
    q('no')
}

suppressPackageStartupMessages(library(genecovr))

parseOption <- function(opts, args, default) {
    if (!any(opts %in% args))
        return(list(default, args))
    if ((length(opts) == 1) && is.logical(default)) {
        m <- match(opts, args)
        args <- args[-m]
        return(list(!default, args))
    }
    if ((length(opts) == 1)) {
        m <- match(opts, args)
        res <- as(args[m + 1], class(default))
        stopifnot(inherits(res, class(default)))
        args <- args[-(m + 1)]
        args <- args[-m]
        return(list(res, args))
    }
    if ((length(opts) == 2)) {
        m <- match(opts, args)
        stopifnot(sum(!is.na(m)) == 1)
        i <- m[!is.na(m)]
        res <- as(args[i + 1], class(default))
        args <- args[-(i + 1)]
        args <- args[-i]
        return(list(res, args))
    }
}

res <- parseOption("-v", args, FALSE)
verbose <- res[[1]]
args <- res[[2]]

res <- parseOption(c("-d", "--output-directory"), args, getwd())
outdir <- res[[1]]
args <- res[[2]]

res <- parseOption(c("-p", "--cpus"), args, 1)
cpus <- res[[1]]
args <- res[[2]]

res <- parseOption(c("--height"), args, 6.0)
fig.height <- res[[1]]
args <- res[[2]]

res <- parseOption(c("--width"), args, 6.0)
fig.width <- res[[1]]
args <- res[[2]]

if (length(args) > 1)
    stop("unsupported or too many arguments in args: ", args)
if (!(length(args) == 1))
    stop("csvfile argument is missing")

csvfile <- args[1]
message("Reading data frame file")
indata <- read.csv(csvfile, header=FALSE,
                   colClasses=c("factor", "character", "character", "character"))
colnames(indata) <- c("dataset", "psl", "assembly", "trxset")

indata$dataset <- factor(indata$dataset, levels=as.character(indata$dataset))
psl.fn <- indata$psl
names(psl.fn) <- indata$dataset
assembly.fn <- indata$assembly
names(assembly.fn) <- indata$dataset
transcripts.fn <- indata$trxset
names(transcripts.fn) <- indata$dataset

## Working directory
curdir <- getwd()

## Create output directory
if (!dir.exists(outdir))
    dir.create(outdir, showWarnings = TRUE, recursive = FALSE, mode = "0777")

## Set cores
suppressPackageStartupMessages(library(BiocParallel))
bpparam <- MulticoreParam(cpus)

## Load sequence info for transcripts and assemblies
suppressPackageStartupMessages(library(Biostrings))
suppressPackageStartupMessages(library(GenomeInfoDb))
.getSeqinfo <- function(fn) {
    if (is.na(fn))
        return(NULL)
    if (grepl("(.fai)$", fn)) {
        readFastaIndex(fn)
    } else {
        ss <- readDNAStringSet(fn)
        names(ss) <- gsub("([^ ]+).*", "\\1", names(ss))
        Seqinfo(names(ss), width(ss))
    }
}
transcripts.sinfo <- lapply(transcripts.fn, .getSeqinfo)
assembly.sinfo <- lapply(assembly.fn, .getSeqinfo)

## Read psl files
apl <- AlignmentPairsList(
    bplapply(names(psl.fn), function(x) {
        readPsl(psl.fn[[x]],
                seqinfo.sbjct=assembly.sinfo[[x]],
                seqinfo.query=transcripts.sinfo[[x]])
    }, BPPARAM=bpparam)
)
names(apl) <- names(psl.fn)

##------------------------------
## Plotting
##------------------------------
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(viridis))
## Set theme
gray <- theme_gray(base_size=18) %+replace% theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
theme_set(gray)

## Add wrapper for saving plots
save_plot <- function(p, prefix, width=fig.width, height=fig.height) {
    ggsave(paste0(prefix, ".pdf"), plot=p, width=width, height=height)
    ggsave(paste0(prefix, ".png"), plot=p, width=width, height=height)
}



##--------------------
## Plot alignment matches to width
##--------------------
message("Making basic mismatch plots...")
outfile <- file.path(outdir, "width_violin")
p <- plot(apl, aes(x=id, y=matches/query.width, fill=id), which="violin") +
    scale_fill_viridis_d() +
    theme(legend.justification = c(1, 0), legend.position = c(1, 0)) +
    ylim(0.7, 1)
save_plot(p, outfile)

##--------------------
## Plot match indel
##--------------------
suppressPackageStartupMessages(library(rlang))
outfile <- file.path(outdir, "match_indel.violin")
cnames <- c("misMatches", "query.NumInsert", "query.BaseInsert")
p <- plot(apl, aes(x=id, y=get_expr(enquo(cnames))), which="violin") +
    facet_wrap(. ~ name, scales="free")
save_plot(p, outfile)

outfile <- file.path(outdir, "match_indel.boxplot")
p <- plot(apl, aes(x=id, y=get_expr(enquo(cnames))), which="boxplot") +
    facet_wrap(. ~ name, scales="free")
save_plot(p, outfile)

outfile <- file.path(outdir, "match_indel.boxplot.log10")
p <- plot(apl, aes(x=id, y=get_expr(enquo(cnames))), which="boxplot") +
    facet_wrap(. ~ name, scales="free") + scale_y_continuous(trans="log10")
save_plot(p, outfile)


## FIXME: number of levels should be parametrized via option
outfile <- file.path(outdir, "qnuminsert")
x <- as.data.frame(apl)
x$cuts <- cut(x$query.NumInsert, c(-1:3, Inf), include.lowest=FALSE)
levels(x$cuts) <- c(0:3, ">3")
x$cuts <- factor(x$cuts, levels=c(">3", 3:0))
p <- ggplot(x, aes(id)) +
    geom_bar(aes(fill=cuts)) +
    scale_fill_viridis_d(name="qNumInsert", begin=1, end=0)
save_plot(p, outfile)


##--------------------
## Save psl data
##--------------------
outfile <- file.path(outdir, "psldata.csv.gz")
message("saving ", outfile)
write.csv(x, file=gzfile(outfile), row.names=FALSE)


##------------------------------
## Gene body coverage
##------------------------------
message("Calculating gene coverage for different cutoffs...")
min.match <- c(0.75, 0.85, 0.9, 0.95)
names(min.match) <- min.match
gbc <- bplapply(apl, function(x) {
    lapply(min.match, function(mm) {geneBodyCoverage(x, min.match=mm)})
}, BPPARAM=bpparam)
gbc.summary <- bplapply(gbc, function(x) {
    y <- do.call("rbind", lapply(x, summarizeGeneBodyCoverage))
})


suppressPackageStartupMessages(library(dplyr))
data <- dplyr::bind_rows(lapply(gbc.summary, data.frame), .id="dataset")
data$dataset <- factor(data$dataset, levels=levels(indata$dataset))

h <- max(data$total)
hmax <- ceiling(h/100) * 100

for (mm in as.numeric(unique(min.match))) {
    message("Plotting coverage for minimum match ", mm)
    outfile <- file.path(outdir, paste0("gene_body_coverage.minmatch.", mm))
    p <- ggplot(subset(data, min.match==mm), aes(x=min.coverage, y=count, group=dataset, color=dataset)) +
        geom_abline(slope=0, intercept=h) +
        geom_point(aes(shape=dataset, color=dataset), size=2) + geom_line() +
        scale_color_viridis_d() + scale_y_continuous(breaks=c(pretty(data$count)), limits=c(0, hmax))
    save_plot(p, outfile)
}

outfile <- file.path(outdir, "gbc_summary.csv.gz")
message("saving ", outfile)
write.csv(data, gzfile(outfile), row.names=FALSE)


##------------------------------
## Plot number of contigs per transcript
##------------------------------
## FIXME: do for more mismatch cutoffs
mm <- 0.75
gbc.list <- subset(unlist(gbc), unlist(lapply(unlist(gbc), function(x) {metadata(x)$min.match == mm})))
names(gbc.list) <- names(gbc)
message("calculating number of contigs per transcript; min.match = ", mm)
data <- dplyr::bind_rows(lapply(
                   lapply(gbc.list, countSubjectsByCoverage, min.match=mm),
                   data.frame),
                   .id="dataset")
data$dataset <- factor(data$dataset, levels=levels(indata$dataset))

p <- ggplot(data=data, aes(x=factor(min.coverage), y=Freq, fill=n.subjects)) +
    geom_bar(stat='identity', position=position_stack()) +
    scale_fill_viridis_d(begin=1, end=0) + facet_wrap(~ dataset, nrow=1, labeller=label_both)

outfile <- file.path(outdir, paste0("ncontigs_per_transcripts.bar.mm", mm))
save_plot(p, outfile)

outfile <- file.path(outdir, "ncontigs_per_transcripts.csv.gz")
message("saving ", outfile)
write.csv(data, gzfile(outfile), row.names=FALSE)


##------------------------------
## Plot depth and breadth of coverage
## NB: similar to above, only do for one mismatch cutoff
##------------------------------
mm <- 0.75
message("plot breadth and depth of coverage; mis.match = ", mm)
data <- dplyr::bind_rows(lapply(gbc.list, data.frame), .id="dataset")
data$dataset <- factor(data$dataset, levels=levels(indata$dataset))

p <- ggplot(data=data, aes(x=coverage, y=depthOfCoverage / breadthOfCoverage,
                           color=factor(n.subjects))) + geom_point(size=1.5) +
    scale_color_viridis_d(alpha=.8) + xlim(0, 1) + ylim(0, 5) +
    facet_wrap(. ~ dataset)
outfile <- file.path(outdir, paste0("depth_breadth_coverage.mm", mm))
save_plot(p, outfile)


p <- ggplot(data=subset(data, n.subjects>1),
            aes(x=factor(dataset), y=depthOfCoverage / breadthOfCoverage)) +
    geom_jitter(size=1.5) + facet_wrap(. ~ n.subjects)
outfile <- file.path(outdir, paste0("depth_breadth_jitter.mm", mm))
save_plot(p, outfile)


p <- ggplot(data=subset(data, n.subjects>1),
            aes(depthOfCoverage/breadthOfCoverage)) +
    geom_histogram() + facet_grid(vars(dataset))
outfile <- file.path(outdir, paste0("depth_breadth_hist.mm", mm))
save_plot(p, outfile)


p <- ggplot(data=subset(data, n.subjects>1),
            aes(x=factor(dataset), y=seqlengths)) +
    geom_boxplot() + facet_grid(. ~ n.subjects)
outfile <- file.path(outdir, paste0("depth_breadth_seqlengths.mm", mm))
save_plot(p, outfile)


outfile <- file.path(outdir, "gene_body_coverage.csv.gz")
message("saving ", outfile)
write.csv(data, gzfile(outfile), row.names=FALSE)
